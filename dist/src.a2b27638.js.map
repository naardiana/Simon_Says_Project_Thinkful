{"version":3,"sources":["src/index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["startButton","document","querySelector","statusSpan","heading","padContainer","computerSequence","playerSequence","maxRoundCount","roundCount","pads","color","selector","sound","Audio","addEventListener","padHandler","startButtonHandler","level","setLevel","classList","add","remove","playComputerTurn","event","target","dataset","pad","find","play","checkPress","levelRange","i","getRandomItem","collection","length","randomIndex","Math","floor","random","setText","element","text","textContent","activatePad","setTimeout","activatePads","sequence","time","forEach","randomColor","push","playHumanTurn","resetGame","checkRound","alert","window","OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","JSON","parse","type","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","body","appendChild","getElementById","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["/**\n * DOM SELECTORS\n */\n\nconst startButton = document.querySelector(\".js-start-button\");\n// TODO: Add the missing query selectors:\nconst statusSpan = document.querySelector(\".js-status\"); // Use querySelector() to get the status element\nconst heading = document.querySelector(\".js-heading\"); // Use querySelector() to get the heading element\nconst padContainer = document.querySelector(\".js-pad-container\"); // Use querySelector() to get the heading element\n\n/**\n * VARIABLES\n */\nlet computerSequence = []; // track the computer-generated sequence of pad presses\nlet playerSequence = []; // track the player-generated sequence of pad presses\nlet maxRoundCount = 0; // the max number of rounds, varies with the chosen level\nlet roundCount = 0; // track the number of rounds that have been played so far\n\n/**\n *\n * The `pads` array contains an array of pad objects.\n *\n * Each pad object contains the data related to a pad: `color`, `sound`, and `selector`.\n * - The `color` property is set to the color of the pad (e.g., \"red\", \"blue\").\n * - The `selector` property is set to the DOM selector for the pad.\n * - The `sound` property is set to an audio file using the Audio() constructor.\n *\n * Audio file for the green pad: \"../assets/simon-says-sound-2.mp3\"\n * Audio file for the blue pad: \"../assets/simon-says-sound-3.mp3\"\n * Audio file for the yellow pad: \"../assets/simon-says-sound-4.mp3\"\n *\n */\n\nconst pads = [\n  {\n    color: \"red\",\n    selector: document.querySelector(\".js-pad-red\"),\n    sound: new Audio(\"../assets/simon-says-sound-1.mp3\"),\n  },\n  // TODO: Add the objects for the green, blue, and yellow pads. Use object for the red pad above as an example.\n  {\n    color: \"green\",\n    selector: document.querySelector(\".js-pad-green\"),\n    sound: new Audio(\"../assets/simon-says-sound-2.mp3\"),\n  },\n  {\n    color: \"blue\",\n    selector: document.querySelector(\".js-pad-blue\"),\n    sound: new Audio(\"../assets/simon-says-sound-3.mp3\"),\n  },\n  {\n    color: \"yellow\",\n    selector: document.querySelector(\".js-pad-yellow\"),\n    sound: new Audio(\"../assets/simon-says-sound-4.mp3\"),\n  },\n];\n\n/**\n * EVENT LISTENERS\n */\n\npadContainer.addEventListener(\"click\", padHandler);\n// TODO: Add an event listener `startButtonHandler()` to startButton.\nstartButton.addEventListener(\"click\", startButtonHandler);\n\n/**\n * EVENT HANDLERS\n */\n\n/**\n * Called when the start button is clicked.\n *\n * 1. Call setLevel() to set the level of the game\n *\n * 2. Increment the roundCount from 0 to 1\n *\n * 3. Hide the start button by adding the `.hidden` class to the start button\n *\n * 4. Unhide the status element, which displays the status messages, by removing the `.hidden` class\n *\n * 5. Call `playComputerTurn()` to start the game with the computer going first.\n *\n */\n\nfunction startButtonHandler() {\n  // TODO: Write your code here.\n  const level = setLevel();\n\n  roundCount++;\n\n  startButton.classList.add(\"hidden\");\n\n  statusSpan.classList.remove(\"hidden\");\n\n  playComputerTurn();\n\n  return {\n    startButton: startButton,\n    statusSpan: statusSpan,\n  };\n}\n\n/**\n * Called when one of the pads is clicked.\n *\n * 1. `const { color } = event.target.dataset;` extracts the value of `data-color`\n * attribute on the element that was clicked and stores it in the `color` variable\n *\n * 2. `if (!color) return;` exits the function if the `color` variable is falsy\n *\n * 3. Use the `.find()` method to retrieve the pad from the `pads` array and store it\n * in a variable called `pad`\n *\n * 4. Play the sound for the pad by calling `pad.sound.play()`\n *\n * 5. Call `checkPress(color)` to verify the player's selection\n *\n * 6. Return the `color` variable as the output\n */\nfunction padHandler(event) {\n  const { color } = event.target.dataset;\n  if (!color) return;\n\n  // TODO: Write your code here.\n  const pad = pads.find((pad) => pad.color === color);\n\n  if (pad) {\n    pad.sound.play();\n  }\n  checkPress(color);\n  return color;\n}\n\n/**\n * HELPER FUNCTIONS\n */\n\n/**\n * Sets the level of the game given a `level` parameter.\n * Returns the length of the sequence for a valid `level` parameter (1 - 4) or an error message otherwise.\n *\n * Each skill level will require the player to complete a different number of rounds, as follows:\n * Skill level 1: 8 rounds\n * Skill level 2: 14 rounds\n * Skill level 3: 20 rounds\n * Skill level 4: 31 rounds\n *\n *\n * Example:\n * setLevel() //> returns 8\n * setLevel(1) //> returns 8\n * setLevel(2) //> returns 14\n * setLevel(3) //> returns 20\n * setLevel(4) //> returns 31\n * setLevel(5) //> returns \"Please enter level 1, 2, 3, or 4\";\n * setLevel(8) //> returns \"Please enter level 1, 2, 3, or 4\";\n *\n */\nfunction setLevel(level = 1) {\n  // TODO: Write your code here.\n  const levelRange = [8, 14, 20, 31];\n  for (let i = 1; i <= 4; i++) {\n    if (level === i) {\n      maxRoundCount = levelRange[i - 1];\n      return maxRoundCount;\n    }\n  }\n  return \"Please enter level 1, 2, 3, or 4\";\n}\n\n/**\n * Returns a randomly selected item from a given array.\n *\n * 1. `Math.random()` returns a floating-point, pseudo-random number in the range 0 to less than 1\n *\n * 2. Multiplying the value from `Math.random()` with the length of the array ensures that the range\n * of the random number is less than the length of the array. So if the length of the array is 4,\n * the random number returned will be between 0 and 4 (exclusive)\n *\n * 3. Math.floor() rounds the numbers down to the largest integer less than or equal the given value\n *\n * Example:\n * getRandomItem([1, 2, 3, 4]) //> returns 2\n * getRandomItem([1, 2, 3, 4]) //> returns 1\n */\nfunction getRandomItem(collection) {\n  if (collection.length === 0) return null;\n  const randomIndex = Math.floor(Math.random() * collection.length);\n  return collection[randomIndex];\n}\n\n/**\n * Sets the status text of a given HTML element with a given a message\n */\nfunction setText(element, text) {\n  // TODO: Write your code here.\n   element.textContent = text;\n   return element;\n}\n\n/**\n * Activates a pad of a given color by playing its sound and light\n *\n * 1. Use the `.find()` method to retrieve the pad from the `pads` array and store it in\n * a variable called `pad`\n *\n * 2. Add the `\"activated\"` class to the selected pad\n *\n * 3. Play the sound associated with the pad\n *\n * 4. After 500ms, remove the `\"activated\"` class from the pad\n */\n\nfunction activatePad(color) {\n  // TODO: Write your code here.\n  const pad = pads.find((pad) => pad.color === color);\n\n  pad.selector.classList.add(\"activated\");\n\n  pad.sound.play();\n\n  setTimeout(() => {\n    pad.selector.classList.remove(\"activated\");\n  }, 500);\n}\n\n/**\n * Activates a sequence of colors passed as an array to the function\n *\n * 1. Iterate over the `sequence` array using `.forEach()`\n *\n * 2. For each element in `sequence`, use `setTimeout()` to call `activatePad()`, adding\n * a delay (in milliseconds) between each pad press. Without it, the pads in the sequence\n * will be activated all at once\n *\n * 3. The delay between each pad press, passed as a second argument to `setTimeout()`, needs\n * to change on each iteration. The first button in the sequence is activated after 600ms,\n * the next one after 1200ms (600ms after the first), the third one after 1800ms, and so on.\n */\n\nfunction activatePads(sequence) {\n  // TODO: Write your code here.\n  let time = 0;\n  sequence.forEach((color) => {\n    setTimeout(() => {\n      activatePad(color);\n    }, time);\n    time += 600;\n  });\n}\n\n/**\n * Allows the computer to play its turn.\n *\n * 1. Add the `\"unclickable\"` class to `padContainer` to prevent the user from pressing\n * any of the pads\n *\n * 2. The status should display a message that says \"The computer's turn...\"\n *\n * 3. The heading should display a message that lets the player know how many rounds are left\n * (e.g., \"`Round ${roundCount} of ${maxRoundCount}`\")\n *\n * 4. Push a randomly selected color into the `computerSequence` array\n *\n * 5. Call `activatePads(computerSequence)` to light up each pad according to order defined in\n * `computerSequence`\n *\n * 6. The playHumanTurn() function needs to be called after the computer’s turn is over, so\n * we need to add a delay and calculate when the computer will be done with the sequence of\n * pad presses. The `setTimeout()` function executes `playHumanTurn(roundCount)` one second\n * after the last pad in the sequence is activated. The total duration of the sequence corresponds\n * to the current round (roundCount) multiplied by 600ms which is the duration for each pad in the\n * sequence.\n */\nfunction playComputerTurn() {\n  // TODO: Write your code here.\n  padContainer.classList.add(\"unclickable\");\n\n  setText(statusSpan, \"The computer's Turn!!!\");\n\n  setText(heading, `Round ${roundCount} of ${maxRoundCount}`);\n  const randomColor = getRandomItem([\"red\", \"green\", \"blue\", \"yellow\"]);\n  computerSequence.push(randomColor);\n\n  activatePads(computerSequence);\n\n  setTimeout(() => playHumanTurn(roundCount), roundCount * 600 + 1000);\n}\n\n/**\n * Allows the player to play their turn.\n *\n * 1. Remove the \"unclickable\" class from the pad container so that each pad is clickable again\n *\n * 2. Display a status message showing the player how many presses are left in the round\n */\nfunction playHumanTurn() {\n  // TODO: Write your code here.\n  padContainer.classList.remove(\"unclickable\");\n  setText(\n    statusSpan,\n    `Press the pads (${computerSequence.length - playerSequence.length} left)`\n  );\n}\n\n/**\n * Checks the player's selection every time the player presses on a pad during\n * the player's turn\n *\n * 1. Add the `color` variable to the end of the `playerSequence` array\n *\n * 2. Store the index of the `color` variable in a variable called `index`\n *\n * 3. Calculate how many presses are left in the round using\n * `computerSequence.length - playerSequence.length` and store the result in\n * a variable called `remainingPresses`\n *\n * 4. Set the status to let the player know how many presses are left in the round\n *\n * 5. Check whether the elements at the `index` position in `computerSequence`\n * and `playerSequence` match. If they don't match, it means the player made\n * a wrong turn, so call `resetGame()` with a failure message and exit the function\n *\n * 6. If there are no presses left (i.e., `remainingPresses === 0`), it means the round\n * is over, so call `checkRound()` instead to check the results of the round\n *\n */\nfunction checkPress(color) {\n  // TODO: Write your code here.\n  playerSequence.push(color);\n\n  if (computerSequence[playerSequence.length - 1] !== color) {\n    resetGame(`{Oops! You made a mistake. Try again.}`);\n    return;\n  }\n\n  if (playerSequence.length === computerSequence.length) {\n    checkRound();\n  } else {\n    setText(\n      statusSpan,\n      `Presses left: ${computerSequence.length - playerSequence.length}`\n    );\n  }\n}\n\n/**\n * Checks each round to see if the player has completed all the rounds of the game * or advance to the next round if the game has not finished.\n *\n * 1. If the length of the `playerSequence` array matches `maxRoundCount`, it means that\n * the player has completed all the rounds so call `resetGame()` with a success message\n *\n * 2. Else, the `roundCount` variable is incremented by 1 and the `playerSequence` array\n * is reset to an empty array.\n * - And the status text is updated to let the player know to keep playing (e.g., \"Nice! Keep going!\")\n * - And `playComputerTurn()` is called after 1000 ms (using setTimeout()). The delay\n * is to allow the user to see the success message. Otherwise, it will not appear at\n * all because it will get overwritten.\n *\n */\n\nfunction checkRound() {\n  // TODO: Write your code here.\n  if (playerSequence.length === maxRoundCount) {\n    resetGame(\"Congratulations! You've completed the game.\");\n  } else {\n    setText(statusSpan, \"Nice! Keep going!\");\n    setTimeout(() => playComputerTurn(), 1000);\n  }\n}\n\n/**\n * Resets the game. Called when either the player makes a mistake or wins the game.\n *\n * 1. Reset `computerSequence` to an empty array\n *\n * 2. Reset `playerSequence` to an empty array\n *\n * 3. Reset `roundCount` to an empty array\n */\nfunction resetGame(text) {\n  // TODO: Write your code here.\n\n  // Uncomment the code below:\n  alert(text);\n  setText(heading, \"Roy's Simon Says Game!\");\n  startButton.classList.remove(\"hidden\");\n  statusSpan.classList.add(\"hidden\");\n  padContainer.classList.add(\"unclickable\");\n\n  computerSequence = [];\n  playerSequence = [];\n  roundCount = 0;\n}\n\n/**\n * Please do not modify the code below.\n * Used for testing purposes.\n *\n */\nwindow.statusSpan = statusSpan;\nwindow.heading = heading;\nwindow.padContainer = padContainer;\nwindow.pads = pads;\nwindow.computerSequence = computerSequence;\nwindow.playerSequence = playerSequence;\nwindow.maxRoundCount = maxRoundCount;\nwindow.roundCount = roundCount;\nwindow.startButtonHandler = startButtonHandler;\nwindow.padHandler = padHandler;\nwindow.setLevel = setLevel;\nwindow.getRandomItem = getRandomItem;\nwindow.setText = setText;\nwindow.activatePad = activatePad;\nwindow.activatePads = activatePads;\nwindow.playComputerTurn = playComputerTurn;\nwindow.playHumanTurn = playHumanTurn;\nwindow.checkPress = checkPress;\nwindow.checkRound = checkRound;\nwindow.resetGame = resetGame;\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}